2017-05-17 09:20:53 || ivan.torok@emarsys.com:
TL;DR:
parancsok (command+argument)
STDIN
STDOUT
STDERR
Exit Code
echo
cat
grep
|
>
>>

http://rogerdudler.github.io/git-guide/
git init
git add
git commit -m ""
git push -u origin master


https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
git remote add origin
git remote -v
git push -u origin master


Hosszabban:
2017-05-17 08:20:43 || ivan.torok@emarsys.com:
Programozás 1

Mit tudunk a terminálról?

CLI command line interface

A parancsok valójában ugyanojan programok, mint amiket mi fogunk írni, csak jellemzően mindehova oda vannak másolva.

$ [Parancs] (arguments)
A parancs az egy program
a shell megkeresi a $PATH-ban a progit és átadja neki az arguments-eket.

/*
  itorok-mbp:~ itorok$ echo $PATH
  /Library/Frameworks/Python.framework/Versions/3.6/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Versions/Current/Commands
  itorok-mbp:~ itorok$
*/

a $PATH tartalmának sorrendje fontos. Az első találatig keres. Ha a saját könyvtáramat hozzáadom, és oda rakok egy cd parancsot, akkor oda nem fog eljutni, mert hamarabb megtalálja az eredeti helyén (ami korábban van a path-ban)

a which command megmondja, hogy hol van a parancs.

/*
  itorok-mbp:~ itorok$ which cd
  /usr/bin/cd
  itorok-mbp:~ itorok$
*/

man parancs: program nevek alapján megadja a manualt

/*
  itorok-mbp:~ itorok$ man whoami
  WHOAMI(1)                 BSD General Commands Manual                WHOAMI(1)

  NAME
       whoami -- display effective user id

  SYNOPSIS
       whoami

  DESCRIPTION
       The whoami utility has been obsoleted by the id(1) utility, and is equivalent to ``id -un''.  The command ``id -p'' is suggested for normal interactive use.

       The whoami utility displays your effective user ID as a name.

  EXIT STATUS
       The whoami utility exits 0 on success, and >0 if an error occurs.

  SEE ALSO
       id(1)

  BSD                              June 6, 1993                              BSD
  (END)
*/


Verzió kezelés:
git

(Jobb, mint az svn, mert nem kellett internet kapcsolat ahhoz, hogy ledokumentáljam azt, hogy mivel dolgozom. Ha elment az internet, akkor nem volt kávészünet, hanem lehetett offline dolgozni.)

SNV ===> [https://en.wikipedia.org/wiki/Apache_Subversion] Apache Subversion (often abbreviated SVN, after its command name svn) is a software versioning and revision control system distributed as open source under the Apache License. Software developers use Subversion to maintain current and historical versions of files such as source code, web pages, and documentation.


!!! a git nem igényel szervert. Ez egy program. Helyben használhatom akármilyen tartalom verziókovetésére. A szerver az (egy nagyon általánosan használt) bónusz feature. A szerver az csak képes kezelni a sok helyről érkező kéréseket.

A git nem teljes állapotokat kezel, hanem változtatásokat. Eltárolja magát a változtatást, és letárolja a változás tényét historiban.


### HF:
1. készíteni a mappát a házi feldatoknak. "git init" parancsot kiadni:
git add
git commit -m "<comment>"

/*
  itorok-mbp:hazi_feladat itorok$ echo valami > tetszoleges-text-file.txt
  itorok-mbp:hazi_feladat itorok$ cat tetszoleges-text-file.txt
  valami
  itorok-mbp:hazi_feladat itorok$ git add tetszoleges-text-file.txt
  itorok-mbp:hazi_feladat itorok$ git commit -m "ez az első commitom. Ez volt a házi ma"
  [master (root-commit) 3b79b85] ez az első commitom. Ez volt a házi ma
   Committer: Ivan Torok <itorok@itorok-mbp.local>
  Your name and email address were configured automatically based
  on your username and hostname. Please check that they are accurate.
  You can suppress this message by setting them explicitly. Run the
  following command and follow the instructions in your editor to edit
  your configuration file:

      git config --global --edit

  After doing this, you may fix the identity used for this commit with:

      git commit --amend --reset-author

   1 file changed, 1 insertion(+)
   create mode 100644 tetszoleges-text-file.txt
  itorok-mbp:hazi_feladat itorok$
*/


/*
  itorok-mbp:hazi_feladat itorok$ git init
  Initialized empty Git repository in /Users/itorok/programozas_luzsi_adammal/hazi_feladat/.git/
*/

2. Megváltoztatni a file-t és commitelni, majd feltolni a githubra
https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
/*
  itorok-mbp:hazi_feladat itorok$ echo "még valami" >> tetszoleges-text-file.txt
  itorok-mbp:hazi_feladat itorok$ cat tetszoleges-text-file.txt
  még valami
  még valami
  itorok-mbp:hazi_feladat itorok$ cat tetszoleges-text-file.txt
  valami
  még valami
  itorok-mbp:hazi_feladat itorok$ git commit -m "újabb még valami commit"
  On branch master
  Changes not staged for commit:
  	modified:   tetszoleges-text-file.txt

  no changes added to commit
  itorok-mbp:hazi_feladat itorok$ git add *
  itorok-mbp:hazi_feladat itorok$ git commit -m "újabb még valami commit"
  [master 77c3ce6] újabb még valami commit
   Committer: Ivan Torok <itorok@itorok-mbp.local>
  Your name and email address were configured automatically based
  on your username and hostname. Please check that they are accurate.
  You can suppress this message by setting them explicitly. Run the
  following command and follow the instructions in your editor to edit
  your configuration file:

      git config --global --edit

  After doing this, you may fix the identity used for this commit with:

      git commit --amend --reset-author

   1 file changed, 1 insertion(+)
  itorok-mbp:hazi_feladat itorok$ git remote add origin https://github.com/ivan-torok-e/programming-with-luzsi.git
  itorok-mbp:hazi_feladat itorok$ git remote -v
  origin	https://github.com/ivan-torok-e/programming-with-luzsi.git (fetch)
  origin	https://github.com/ivan-torok-e/programming-with-luzsi.git (push)
  itorok-mbp:hazi_feladat itorok$ git push -u origin master
  Username for 'https://github.com': ivan-torok-e
  Password for 'https://ivan-torok-e@github.com':
  Counting objects: 6, done.
  Delta compression using up to 4 threads.
  Compressing objects: 100% (4/4), done.
  Writing objects: 100% (6/6), 522 bytes | 0 bytes/s, done.
  Total 6 (delta 0), reused 0 (delta 0)
  To https://github.com/ivan-torok-e/programming-with-luzsi.git
   * [new branch]      master -> master
  Branch master set up to track remote branch master from origin.
  itorok-mbp:hazi_feladat itorok$
*/



Egy átlag program négy dologból tud adatot bevenni (kommunikálni):
- argumensek: amikor a program neve mellé beírok valamit
- STDIN: standard input. Egy szöveges streamet (karakterláncot / szöveget), és amikor a progam valamit kíír, akkor az meg a STDOUT (standard output, alapból az a terminál / képernyő) és / vagy STDERR (ezt nem feltétlen írja ki a terminálra) és / vagy Exit Code


==> echo: argumens be kiadja a STDOUT-on
==> cat: kiírja a file tartalmát az STDOUT-ra STDERR-re meg a hibát (ha van)
==> grep: regex kereső. STDIN-en kap infót (benne van a cat feature is, csak ez keresni is tud benne)
==> "|" (pipe) az előző parancs STDOUT-ját a következő parancs STDIN-jévé változtatja
==> ">"

!!! csurgatott adattal dolgozunk, vagy felnyaljuk a memóriába az egészet
